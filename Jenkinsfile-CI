pipeline {
    agent {
    docker {
      image 'arjun7443/maven-abhishek-docker-agent:v1'
      args '-u root --privileged -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon with privileges
    }
  }
      

    stages {
       stage('Install Trivy') {
    steps {
        sh '''
        if ! [ -x "$(command -v trivy)" ]; then
            echo "Installing Trivy..."
            wget https://github.com/aquasecurity/trivy/releases/download/v0.41.0/trivy_0.41.0_Linux-64bit.tar.gz
            tar zxvf trivy_0.41.0_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin/
        else
            echo "Trivy already installed."
        fi
        '''
    }
}

        

       stage('Build and Test') {
            steps {
                
                echo 'Listing files...'
                sh 'ls -ltr'
                echo 'Building the project and creating a JAR file...'
                sh 'mvn clean package' // Build the project with Maven
               
            }
        }

        stage('Build Docker Image') {
            environment {
                DOCKER_IMAGE = "arjun7443/ultimate-cicd:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred') // Reference Docker credentials
            }
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}"
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                    sh "docker images ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Trivy Image Scan') {
             environment {
                DOCKER_IMAGE = "arjun7443/ultimate-cicd:${BUILD_NUMBER}"
                     }
            steps {
                script { 
                    echo "Scanning Docker image for vulnerabilities..."
                    def scanResult = sh(script: "sudo trivy image --exit-code 1 --severity HIGH,CRITICAL ${DOCKER_IMAGE}", returnStatus: true)
                    if (scanResult != 0) {
                        echo "Vulnerabilities found in image: ${DOCKER_IMAGE}"
                    } else {
                        echo "No critical vulnerabilities found."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker image to registry..."
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "DevopsProject1"
            GIT_USER_NAME = "arjun7443"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "nagarjuna7443@gmail.com"
                    git config user.name "Nagarjuna"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" manifests/deployment.yml
                    git add manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
                   stage(' Cleanup') {
            steps {
                deleteDir() // Clean up the workspace
            }
        }







        
  }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
